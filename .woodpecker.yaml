# KiCad projects on Codeberg
#
# Copy this into your .woodpecker directory, or place it into the root
# directory of your repository and call it .woodpecker.yml
#
# This uses [KiBot](https://github.com/INTI-CMNB/KiBot/) to automate a
# lot of things surrounding electronics projects in KiCad
#
# In this example, I'm assuming you want to generate gerber files
# and a schematic PDF automatically on each push, but KiBot has a vast
# number of options that you can look into!
#
# We will store the files as a single zip file in the "packages" section
# of your project. For this to work, you will need to add two secrets:
# - codeberg_user should contain your username, the way it is used to log in
# - codeberg_token is created in your codeberg account settings and can then
#   be copied to the woodpecker secrets. It gives the CI system access to
#   your account (we need this to post to "packages")
#
# Packages will show up in your project after you go to your personal packages
# page https://codeberg.org/<your username>/-/packages and associate the
# newly created package with your project. This only has to be done once.
#
# The included `config.kibot.yaml` file is an example KiBot config file, not
# a woodpecker file. Look at the KiBot documentation liked to above to add
# your own tweaks
variables:
  - &image 'ghcr.io/inti-cmnb/kicad8_auto:latest'
  get_files: &get_files
    - FILES=$(find . -name *$SEARCH -not -path "./.gitlab/*")
  get_dirs: &get_dirs
    - <<: *get_files
    - | 
      if [[ $FILES == "" ]]; then
        DIRS=""
      else
        DIRS=$(dirname $FILES)
      fi
  sch_from_pro: &sch_from_pro
    - 'SCHEMS=$(for f in $FILES ; do echo "${f%.*}.kicad_sch"; done)'
    - 'SCHEMS=$(for f in $SCHEMS ; do echo "${f##**/}"; done)'
  get_dirs_filt: &get_dirs_filt
    - <<: *get_files
    - | 
      FILT_FILES=""
      FILT_DIRS=""
      for f in $FILES
      do 
        dir=$(dirname $f)
        echo $dir
        if [[ "$dir" =~ ^.?\/?[0-9]{6}-.*$ || "$dir" =~ .+_panel ]] 
        then 
          FILT_FILES=$(echo "$FILT_FILES $f")
          FILT_DIRS=$(echo "$FILT_DIRS $dir")
        fi
      done
      FILES=$FILT_FILES
      DIRS=$FILT_DIRS
  dir_arr: &dir_arr
    - <<: *get_dirs_filt
    - |
      END=$(echo $DIRS | wc -w)
      dir_arr=($DIRS)
  kibot: &kibot
    - 'SEARCH=".kicad_pro"'
    - <<: *dir_arr
    - <<: *sch_from_pro
    - sch_arr=($SCHEMS)
    - |
      cd $CI_PROJECT_DIR
      for i in $(seq 1 $END)
        do
          if [[ ${dir_arr[i-1]} == "./Frame" ]]; then
            continue
          fi
          echo ${dir_arr[i-1]} 
          echo ${sch_arr[i-1]} 
          kibot -e ${dir_arr[i-1]}/${sch_arr[i-1]} -c $CI_PROJECT_DIR/default.kibot.yaml -d $CI_PROJECT_DIR/Fabrication/${dir_arr[i-1]} -s $SUFFIX
          mv $CI_PROJECT_DIR/Fabrication/${dir_arr[i-1]}/*.zip Fabrication/ 2> /dev/null || true
        done
    - cd $CI_PROJECT_DIR
  strip_tag:
    - TAG=$(echo ${CI_COMMIT_MESSAGE} | tr -d \\n)
  - &SUFF_MECH 'run_erc,run_drc step'
  - &SUFF_SCH 'run_drc step'

steps:
  # kibot creates the files
  dev:
    when:
      - branch: dev
        event: [push]
    image: *image
    commands:
    - export CI_PROJECT_DIR=$CI_WORKSPACE
    # - !reference [.commands, git_tag]
    - SUFFIX=*SUFF_MECH
    - <<: *kibot

  # gitea package stores the resulting file as a package
  artifacts:
    when:
      event: [push, pull_request]
    image: gurken2108/drone-gitea-package
    settings:
      user:
        from_secret: codeberg_user
      token:
        from_secret: codeberg_token
      # the resulting file will be called like your project is called.
      file: codeberg-kicad-kibot-example/kibot/codeberg-kicad-kibot-example-production-files.zip
